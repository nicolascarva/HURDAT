# -*- coding: utf-8 -*-
"""Hurdat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RnJJyxycrVarRx4EBeF1ASYT-D6_W6mL
"""

import pandas as pd
import numpy as np
from google.colab import files
url='https://raw.githubusercontent.com/nicolascarva/HURDAT/main/hurdat2-1851-2019-052520.csv'

"""PDF to data information: https://www.aoml.noaa.gov/hrd/hurdat/hurdat2-format.pdf

###Data consists of one row with information identifying hurricane (Primary Row) and subsequent rows with information known about the hurricane at specific date &  time (Data Rows) - up until the next Primary Row
"""

df=pd.read_csv(url, names=['id', 'time', 'record_identifier','status','latitude','longitude','max_sust_wind', 'min_press',])
df.head(30)

"""###We'll add a column with the hurricane id and name concatenated, this will be our unique identifier; we'll fill all subsequent rows with the same identifier (id-name), up until the next Primary Row. We'll also add a column to tag data rows to be dropped later."""

#Add Unique identifier (id-name) column
df['id-name']=(df['id']*df['max_sust_wind'].isnull()+df['max_sust_wind'].isnull()*df['time'])

df.loc[(df['id-name']==''),'id-name']=np.NaN #Set Data Rows in id-name columns as NaN to be filled in subsequent step
df.loc[(df['min_press']==-999, 'min_press')]=np.NaN #Set unknown minimum pressure as NaN
u_hur_=df['id-name'].value_counts().sum()
print(u_hur_)

df['drop_']=df['id-name'] # Add column to tag rows to be dropped later
df['id-name'].fillna(method='ffill',inplace=True) #Fill id-name column
pd.set_option('display.max_rows', 200) #Allow the display of more rows when needed
# df.tail(100)

#Adding lf column if storm makes landfall (1 for landfall, 0 for no landfall)
for i in range (len(df)):
  df['record_identifier'][i]=df['record_identifier'][i].strip()

df.loc[df['record_identifier']=='L',['lf']]=1 #Tag hurricanes that made landfall with a 1 (to be grouped later)
df.loc[df['record_identifier']!='L',['lf']]=0
df['wind_speed_lf']=df['lf']*df['max_sust_wind'] #Record windspeed at landfal
# df['wind_speed_lf'].head()
df.head(100)

df.loc[df['record_identifier']=='L', 'max_sust_wind']

# Set unique identifier as index
# df.set_index(df['id-name'], inplace=True)

#Calculate Number of Hurricanes and check
total_hur=df['id-name'].nunique()
total_hur
assert total_hur==u_hur_
total_hur
list_hur=df['id-name'].unique().tolist()

#Create dataframe with max wind speed, mean wind speed, minimum pressure, mean pressure, landfall status,  of each hurricane
max_speed=df.groupby(['id-name'], sort=None)['max_sust_wind'].max()
max_speed=pd.DataFrame(max_speed)
max_speed.reset_index(inplace=True)
max_speed.rename(columns={"max_sust_wind": "max_wind"}, inplace=True)
# print('Max Speed reached: ', max_speed)
# max_speed.head()

mean_speed=df.groupby(['id-name'], sort=None)['max_sust_wind'].mean()
mean_speed=round(pd.DataFrame(mean_speed),1)
mean_speed.reset_index(inplace=True)
mean_speed.rename(columns={"max_sust_wind": "mean_wind"}, inplace=True)
# print('Mean of Maximum Speed: ', mean_speed)

min_pressure=df.groupby(['id-name'], sort=None)['min_press'].min()
min_pressure=pd.DataFrame(min_pressure)
min_pressure.reset_index(inplace=True)
# print('Minimum Pressure reached: ', min_pressure)

mean_pressure=df.groupby(['id-name'], sort=None)['min_press'].mean()
mean_pressure=round(pd.DataFrame(mean_pressure),1)
mean_pressure.reset_index(inplace=True)
mean_pressure.rename(columns={"min_press": "mean_of_min_press"}, inplace=True)
# print('Mean of Minimum Pressure: ', mean_pressure)

lf=df.groupby(['id-name'], sort=None)['lf'].max()
lf=pd.DataFrame(lf)
lf.reset_index(inplace=True)
# print('Landfall status: ', lf)
# lf.head()

df['wind_speed_lf']=df['wind_speed_lf'].replace(0, np.nan)  #Replace 0 with NaN
ws_lf=df.groupby(['id-name'], sort=None)['wind_speed_lf'].mean()
ws_lf=pd.DataFrame(ws_lf)
ws_lf.reset_index(inplace=True)
ws_lf.head()

#drop rows to keep unique hurricanes
df_hur=df.dropna(subset=['drop_'])
df_hur.drop(columns=['status','latitude','longitude', 'drop_', 'record_identifier','max_sust_wind',	'min_press', 'lf', 'wind_speed_lf'], inplace=True)

df_hur.rename(columns={"time": "Name"}, inplace=True)


#Add year column
df_hur['year']=df_hur['id'].str[-4:]
df_hur.reset_index() 
df_hur['year'] = pd.DatetimeIndex(pd.to_datetime(df_hur['year'])).year #Change year format to integer

#Add decade column 185 = 1850's 199=1990's, etc.
df_hur['dec']=df_hur['year'].div(10).astype(int)

#Add max speed column
df_hur=pd.merge(df_hur, max_speed, on=['id-name'])

# Add mean wind column
df_hur=pd.merge(df_hur, mean_speed, on=['id-name'])

#Add min press column
df_hur=pd.merge(df_hur, min_pressure, on=['id-name'])

#Add mean press column
df_hur=pd.merge(df_hur, mean_pressure, on=['id-name'])

#Add lf column
df_hur=pd.merge(df_hur, lf, on=['id-name'])

#Add ws_lf column
df_hur=pd.merge(df_hur, ws_lf, on=['id-name'])
df_hur.head(150)

"""#Group data by Years:"""

#Group data by years 
max_wind_year=df_hur.groupby(['year'], sort=None)['max_wind'].max()

min_press_year=df_hur.groupby(['year'], sort=None)['min_press'].min()

num_hur_year=df_hur['year'].value_counts()

lf_year=df_hur.groupby(['year'],sort=None)['lf'].sum()

ws_lf_year=df_hur.groupby(['year'],sort=None)['wind_speed_lf'].mean()  #Calculate mean wind speed recorded of hurricanes at time of landfall


# unique_years=df_hur['year'].unique()
# unique_years
df_year=pd.DataFrame({'year': df_hur['year'].unique(), 'max_wind': max_wind_year, 'min_press': min_press_year, 'No_of_Hurricanes': num_hur_year, 'No_of_lf_Hurricanes': lf_year, 'mean_ws_at_lf': round(ws_lf_year,1)})

df_year['lf_perc']=round(df_year['No_of_lf_Hurricanes']/df_year['No_of_Hurricanes']*100,2)
df_year.head(10)

import matplotlib.pyplot as plt

plt.scatter(df_year['year'], df_year['No_of_Hurricanes'], )

import seaborn as sns
sns.pairplot(df_year)

sns.lmplot(x='year', y='mean_ws_at_lf',data=df_year, ci=95)

from statsmodels.formula.api import ols
model=ols('mean_ws_at_lf ~ year + max_wind', data=df_year).fit()
print(model.summary())

from statsmodels.formula.api import ols
model=ols('max_wind ~ year', data=df_year).fit()
print(model.summary())

from statsmodels.formula.api import ols
model=ols('No_of_Hurricanes ~ year', data=df_year).fit()
print(model.summary())

from statsmodels.formula.api import ols
model=ols('max_wind ~ year', data=df_year).fit()
print(model.summary())

"""By Decades:"""

#Group data by decades 
max_wind_dec=df_hur.groupby(['dec'], sort=None)['max_wind'].max()
max_wind_dec

min_press_dec=df_hur.groupby(['dec'], sort=None)['min_press'].min()

num_hur_dec=df_hur['dec'].value_counts()

lf_dec=df_hur.groupby(['dec'],sort=None)['lf'].sum()

ws_lf_dec=df_hur.groupby(['dec'],sort=None)['wind_speed_lf'].mean()  #Calculate mean wind speed recorded of hurricanes at time of landfall


# unique_decs=df_hur['dec'].unique()
# unique_decs
df_dec=pd.DataFrame({'dec': df_hur['dec'].unique(), 'max_wind': max_wind_dec, 'min_press': min_press_dec, 'No_of_Hurricanes': num_hur_dec, 'No_of_lf_Hurricanes': lf_dec, 'mean_ws_at_lf': round(ws_lf_dec,1)})

df_dec['lf_perc']=round(df_dec['No_of_lf_Hurricanes']/df_dec['No_of_Hurricanes']*100,2)
df_dec.head(30)

import seaborn as sns
sns.pairplot(df_dec)

model=ols('mean_ws_at_lf ~ dec', df_dec).fit()
print(model.summary())

import matplotlib.pyplot as plt

plt.scatter(df_dec['dec'], df_dec['No_of_Hurricanes'])